##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.10.0-B14] date: [Mon Aug 07 22:16:45 CEST 2023]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

TARGET=python_test

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT_DEBUG = -Og
OPT_PERFORMANCE = -O0


#######################################
# paths
#######################################
# Build path
BUILD_DIR = $(PROJECT_ROOT)/python_test/build

######################################
# source
######################################
# C sources
C_SOURCES =  

C_SOURCES_OPT = \
$(wildcard $(PROJECT_ROOT)/effects/*/*.c) \
$(wildcard $(PROJECT_ROOT)/python_test/callout_mocks.c) \
$(wildcard $(PROJECT_ROOT)/python_test/main.c) \
$(wildcard $(PROJECT_ROOT)/Src/pattern_generate.c) \
$(wildcard $(PROJECT_ROOT)/Src/led_position.c) \
$(wildcard $(PROJECT_ROOT)/Src/font_engine.c)

#######################################
# binaries
#######################################
PREFIX =
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DLEDSQUARE \
-DN_LEDSQARE_ROWS=3 \
-DN_LEDSQARE_COLS=5 \
-DHORIZONTAL_MOUNTING \
#-DCOMPILE_TESTS


# AS includes
AS_INCLUDES =

# C includes
C_INCLUDES =  \
-ICore/Inc \
-I$(PROJECT_ROOT)/audio_stuff/inc \
-I$(PROJECT_ROOT)/Inc \


# compile gcc flags

CFLAGS = $(C_DEFS) $(C_INCLUDES) -Wall -fPIC
#CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -DCOMPILE_TESTS

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)" -g -gdwarf-2


#######################################
# LDFLAGS
#######################################
# link script

# libraries
LIBS = -lm
LIBDIR =
LDFLAGS = $(LIBDIR) $(LIBS)

# default action: build all
all: $(BUILD_DIR)/$(TARGET).so


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
#list of objects with need of high optimization
OBJECTS += $(addprefix $(BUILD_DIR)/opt/,$(notdir $(C_SOURCES_OPT:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES_OPT)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@$(CC) -c $(CFLAGS) $(OPT_PERFORMANCE) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	$(info Compiling $<)

$(BUILD_DIR)/opt/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) $(OPT_PERFORMANCE) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	$(info Compiling $<)


$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).so: $(OBJECTS) Makefile
	ld -shared $(OBJECTS) $(LDFLAGS) -o $@
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@.elf
	$(SZ) $@
	$(SZ) $@.elf

$(BUILD_DIR):
	mkdir -p $@
	mkdir -p $@/opt/

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)
-include $(wildcard $(BUILD_DIR)/opt/*.d)

# *** EOF ***

